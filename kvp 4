class Node:
    def __init__(self,data):
        self.data=data
    self.next=None
class LinkedList:
    def __init__(self):
        self.head=None
    def insertAtBegin(self,data):
        new_node=Node(data)
        if self.head is None:
            self.head=new_node
            return
        else:
            new_node.next=self.head
            self.head=new_node
    def InsertAtIndex(self,data.index):
        new_node=Node(data)
        current_node=self.head
        position=0
        if possition ==index:
            self.InsertAtBegin(data)
            else:
                while(current_node !=None and posotion+1 != index):
                    position=position+1
                    current_node=current_node.next
                    if current_node !=None:
                        new_node.next=current_node.next
                        current_node.next=new_node
                        else:
                            print("index not present")
    def insertAtEnd(self,data):
        new_node=Node(data)
        if self.head is None:
            self.head=new_node
            return
        current_node=self.head
        while(current_node.next):
            current_node=current_node.next
            current_node.next=new_node
    def updateNode(self,val,index):
        current_node=self.head
        position=0
        if position ==index:
            current_node.data=val
        else:
            while(current_node !=None and position !=index):
                position=position+1
                current_node=current_node.next
                if current_node !=None:
                    current_node.data=val
                else:
                    print("index is not present")
    def remove_first_node(self):
        if(self.head ==None):
            return
        self.head=self.head.next
    def remove_last_node(self):
        if self.head is None:
            return
        current_node=self.head
        while(current_node.next.next):
            current_node=current_node.next
        current_node.next =None  
    def printLL (self):
    current_node=self.head
    while(current_node):
        print(current_node.data)
        current_node=current_node.next
llist=LinkedList()
llist.inserAtEnd('a')
llist.inserAtEnd('b')
llist.inserAtEnd('c')
llist.inserAtEnd('d')
llist.printLL()
llist.remove_first_node()
llist.remove_last_node()
llist.remove_first_node()
print("after removing nodes")
llist.printLL()
class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
class LinkedList:
    def __init__(self):
        self.head=None
    def insertAtBegin(self,data):
        new_node=Node(data)
        if self.head is None:
            self.head=new_node
            return
        else:
            new_node.next=self.head
            self.head=new_node
    def InsertAtIndex(self,data,index):
        new_node=Node(data)
        current_node=self.head
        position=0
        if possition ==index:
            self.InsertAtBegin(data)
        else:
            while(current_node !=None and posotion+1 != index):
                position=position+1
                current_node=current_node.next
            if current_node !=None:
                new_node.next=current_node.next
                current_node.next=new_node
            else:
                print("index not present")
    def insertAtEnd(self,data):
        new_node=Node(data)
        if self.head is None:
            self.head=new_node
            return
        current_node=self.head
        while(current_node.next):
            current_node=current_node.next
            current_node.next=new_node
    def updateNode(self,val,index):
        current_node=self.head
        position=0
        if position ==index:
            current_node.data=val
        else:
            while(current_node !=None and position !=index):
                position=position+1
                current_node=current_node.next
                if current_node !=None:
                    current_node.data=val
                else:
                    print("index is not present")
    def remove_first_node(self):
        if(self.head ==None):
            return
        self.head=self.head.next
    def remove_last_node(self):
        if self.head is None:
            return
        current_node=self.head
        while(current_node.next.next):
            current_node=current_node.next
        current_node.next =None  
    def printLL (self):
        current_node=self.head
        while(current_node):
            print(current_node.data)
            current_node=current_node.next
llist=LinkedList()
llist.insertAtEnd('a')
llist.insertAtEnd('b')
llist.insertAtEnd('c')
llist.insertAtEnd('d')
llist.printLL()
llist.remove_first_node()
llist.remove_last_node()
llist.remove_first_node()
print("after removing nodes")
llist.printLL()
